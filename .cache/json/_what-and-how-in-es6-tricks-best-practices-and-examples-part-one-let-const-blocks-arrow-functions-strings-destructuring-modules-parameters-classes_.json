{"data":{"post":{"id":"cG9zdDoxNDQx","excerpt":"<p>A cheat sheet for everyday use, containing a selection of ES2015 [ES6] tips with examples.&nbsp;Share your tips in the comments!&nbsp; var vs let / const In addition to&nbsp;&nbsp;var&nbsp;us, 2 new identifiers are now available for storing values ​​-&nbsp;let&nbsp;and&nbsp;&nbsp;const.&nbsp;In contrast&nbsp;&nbsp;var,&nbsp;letthey&nbsp;&nbsp;const&nbsp;have a block scope. Usage example&nbsp;&nbsp;var: But what happens when replacing&nbsp;&nbsp;var&nbsp;with&nbsp;&nbsp;let: Such a change in behavior indicates [&hellip;]</p>\n","content":"\n<p>A cheat sheet for everyday use, containing a selection of ES2015 [ES6] tips with examples.&nbsp;Share your tips in the comments!&nbsp;</p>\n\n\n\n<h3>var vs let / const</h3>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>In addition to&nbsp;&nbsp;<code>var</code>&nbsp;us, 2 new identifiers are now available for storing values ​​-&nbsp;<code>let</code>&nbsp;and&nbsp;&nbsp;<code>const</code>.&nbsp;In contrast&nbsp;&nbsp;<code>var</code>,&nbsp;<code>let</code>they&nbsp;&nbsp;<code>const</code>&nbsp;have a block scope.</p></blockquote>\n\n\n\n<p>Usage example&nbsp;&nbsp;<code>var</code>:</p>\n\n\n<div class=\"wp-block-syntaxhighlighter-code \"><pre class=\"brush: plain; title: ; notranslate\" title=\"\">\nvar snack = 'Meow Mix';\n\nfunction getFood(food) {\n    if (food) {\n        var snack = 'Friskies';\n        return snack;\n    }\n    return snack;\n}\n\ngetFood(false); // undefined\n</pre></div>\n\n\n<p>But what happens when replacing&nbsp;&nbsp;<code>var</code>&nbsp;with&nbsp;&nbsp;<code>let</code>:</p>\n\n\n<div class=\"wp-block-syntaxhighlighter-code \"><pre class=\"brush: plain; title: ; notranslate\" title=\"\">\nlet snack = 'Meow Mix';\n\nfunction getFood(food) {\n    if (food) {\n        let snack = 'Friskies';\n        return snack;\n    }\n    return snack;\n}\n\ngetFood(false); // 'Meow Mix'\n</pre></div>\n\n\n<p>Such a change in behavior indicates that you need to be careful when refactoring the old code in which it is used&nbsp;&nbsp;<code>var</code>.&nbsp;A simple change&nbsp;&nbsp;<code>var</code>&nbsp;to&nbsp;&nbsp;<code>let</code>&nbsp;can lead to unpredictable program behavior.</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p><strong>Note</strong>&nbsp;:&nbsp;<code>let</code>&nbsp;and are&nbsp;&nbsp;<code>const</code>&nbsp;visible only in their block.&nbsp;Thus, an attempt to call them before the declaration will result in&nbsp;&nbsp;<code>ReferenceError</code>.</p></blockquote>\n\n\n<div class=\"wp-block-syntaxhighlighter-code \"><pre class=\"brush: plain; title: ; notranslate\" title=\"\">\nconsole.log(x); // ReferenceError: x is not defined\n\nlet x = 'hi';\n</pre></div>\n\n\n<blockquote class=\"wp-block-quote\"><p><strong>Best Practice</strong>&nbsp;: Leave&nbsp;&nbsp;<code>var</code>&nbsp;in legacy code for further thorough refactoring.&nbsp;When working with new code, use&nbsp;&nbsp;<code>let</code>&nbsp;for variables whose values ​​will change, and&nbsp;&nbsp;<code>const</code>&nbsp;&#8211; for immutable variables.</p></blockquote>\n\n\n\n<h3>Replacing Immediately Called Functions (IIFE) with Blocks</h3>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Usually,&nbsp;&nbsp;<strong>immediately called functions</strong>&nbsp;&nbsp;are used to enclose values ​​in their scope.&nbsp;In ES6, you can create block scopes.</p></blockquote>\n\n\n<div class=\"wp-block-syntaxhighlighter-code \"><pre class=\"brush: plain; title: ; notranslate\" title=\"\">\n(function () {\n    var food = 'Meow Mix';\n}());\n\nconsole.log(food); // Reference Error\n</pre></div>\n\n\n<p>ES6 Blocks Example:</p>\n\n\n<div class=\"wp-block-syntaxhighlighter-code \"><pre class=\"brush: plain; title: ; notranslate\" title=\"\">\n{\n    let food = 'Meow Mix';\n};\n\nconsole.log(food); // Reference Error\n</pre></div>\n\n\n<h3>Arrow functions</h3>\n\n\n\n<p>When using nested functions, it is often necessary to separate the context&nbsp;&nbsp;<code>this</code>&nbsp;from its lexical scope.&nbsp;An example is given below:</p>\n\n\n<div class=\"wp-block-syntaxhighlighter-code \"><pre class=\"brush: plain; title: ; notranslate\" title=\"\">\nfunction Person(name) {\n    this.name = name;\n}\n\nPerson.prototype.prefixName = function (arr) {\n    return arr.map(function (character) {\n        return this.name + character; // Cannot read property 'name' of undefined\n    });\n};\n</pre></div>\n\n\n<p>A common solution to this problem is to store the context&nbsp;&nbsp;<code>this</code>&nbsp;in a variable:</p>\n\n\n<div class=\"wp-block-syntaxhighlighter-code \"><pre class=\"brush: plain; title: ; notranslate\" title=\"\">\nfunction Person(name) {\n    this.name = name;\n}\n\nPerson.prototype.prefixName = function (arr) {\n    var that = this; // Store the context of this\n    return arr.map(function (character) {\n        return that.name + character;\n    });\n};\n</pre></div>\n\n\n<p>We can also pass the desired context&nbsp;&nbsp;<code>this</code>:</p>\n\n\n<div class=\"wp-block-syntaxhighlighter-code \"><pre class=\"brush: plain; title: ; notranslate\" title=\"\">\nfunction Person(name) {\n    this.name = name;\n}\n\nPerson.prototype.prefixName = function (arr) {\n    return arr.map(function (character) {\n        return this.name + character;\n    }, this);\n};\n</pre></div>\n\n\n<p>Or bind context:</p>\n\n\n<div class=\"wp-block-syntaxhighlighter-code \"><pre class=\"brush: plain; title: ; notranslate\" title=\"\">\nfunction Person(name) {\n    this.name = name;\n}\n\nPerson.prototype.prefixName = function (arr) {\n    return arr.map(function (character) {\n        return this.name + character;\n    }.bind(this));\n};\n</pre></div>\n\n\n<p>Using  <strong>arrow functions</strong>, the lexical meaning is  <code>this</code> not hidden, and the above code can be rewritten as follows:</p>\n\n\n<div class=\"wp-block-syntaxhighlighter-code \"><pre class=\"brush: plain; title: ; notranslate\" title=\"\">\nfunction Person(name) {\n    this.name = name;\n}\n\nPerson.prototype.prefixName = function (arr) {\n    return arr.map(character =&gt; this.name + character);\n};\n</pre></div>\n\n\n<blockquote class=\"wp-block-quote\"><p><strong>Best practice</strong>&nbsp;: Use&nbsp;&nbsp;<strong>arrow functions</strong>&nbsp;&nbsp;whenever you need to preserve lexical meaning&nbsp;&nbsp;<code>this</code>.</p></blockquote>\n\n\n\n<p>Arrow functions are also more understandable when used to write functions that simply return a value:</p>\n\n\n<div class=\"wp-block-syntaxhighlighter-code \"><pre class=\"brush: plain; title: ; notranslate\" title=\"\">\nvar squares = arr.map(function (x) { return x * x }); // Function Expression\n</pre></div>\n\n<div class=\"wp-block-syntaxhighlighter-code \"><pre class=\"brush: plain; title: ; notranslate\" title=\"\">\nconst arr = &#91;1, 2, 3, 4, 5];\nconst squares = arr.map(x =&gt; x * x); // Arrow Function for terser implementation\n</pre></div>\n\n\n<blockquote class=\"wp-block-quote\"><p><strong>Best practice</strong>&nbsp;: use&nbsp;&nbsp;<strong>arrow functions</strong>&nbsp;&nbsp;instead of function expressions when appropriate.</p></blockquote>\n\n\n\n<h3>Strings</h3>\n\n\n\n<p>With the advent of ES6, the standard library has grown dramatically.&nbsp;In addition to previous changes, string methods such as&nbsp;&nbsp;<code>.includes()</code>&nbsp;and appeared&nbsp;&nbsp;<code>.repeat()</code>.</p>\n\n\n\n<h4>.includes ()</h4>\n\n\n<div class=\"wp-block-syntaxhighlighter-code \"><pre class=\"brush: plain; title: ; notranslate\" title=\"\">\nvar string = 'food';\nvar substring = 'foo';\n\nconsole.log(string.indexOf(substring) &gt; -1);\n</pre></div>\n\n\n<p>Instead of checking the return value&nbsp;&nbsp;<code>&gt; -1</code>&nbsp;to check for the substring, you can use&nbsp;&nbsp;<code>.includes()</code>that returns a boolean:</p>\n\n\n<div class=\"wp-block-syntaxhighlighter-code \"><pre class=\"brush: plain; title: ; notranslate\" title=\"\">\nconst string = 'food';\nconst substring = 'foo';\n\nconsole.log(string.includes(substring)); // true\n</pre></div>\n\n\n<h4>.repeat ()</h4>\n\n\n<div class=\"wp-block-syntaxhighlighter-code \"><pre class=\"brush: plain; title: ; notranslate\" title=\"\">\nfunction repeat(string, count) {\n    var strings = &#91;];\n    while(strings.length &lt; count) {\n        strings.push(string);\n    }\n    return strings.join('');\n}\n</pre></div>\n\n\n<p>In ES6, everything is much simpler:</p>\n\n\n<div class=\"wp-block-syntaxhighlighter-code \"><pre class=\"brush: plain; title: ; notranslate\" title=\"\">\n// String.repeat(numberOfRepetitions)\n'meow'.repeat(3); // 'meowmeowmeow'\n</pre></div>\n\n\n<h4>Template Literals</h4>\n\n\n\n<p>Using template literals, we can safely use special characters in strings.</p>\n\n\n<div class=\"wp-block-syntaxhighlighter-code \"><pre class=\"brush: plain; title: ; notranslate\" title=\"\">\nvar text = &quot;This string contains \\&quot;double quotes\\&quot; which are escaped.&quot;;\n</pre></div>\n\n<div class=\"wp-block-syntaxhighlighter-code \"><pre class=\"brush: plain; title: ; notranslate\" title=\"\">\nlet text = `This string contains &quot;double quotes&quot; which don't need to be escaped anymore.`;\n</pre></div>\n\n\n<p><strong>Template literals</strong>&nbsp;&nbsp;also support interpolation, which makes the task of concatenating strings and values:</p>\n\n\n<div class=\"wp-block-syntaxhighlighter-code \"><pre class=\"brush: plain; title: ; notranslate\" title=\"\">\nvar name = 'Tiger';\nvar age = 13;\n\nconsole.log('My cat is named ' + name + ' and is ' + age + ' years old.');\n</pre></div>\n\n\n<p>Much simpler:</p>\n\n\n<div class=\"wp-block-syntaxhighlighter-code \"><pre class=\"brush: plain; title: ; notranslate\" title=\"\">\nconst name = 'Tiger';\nconst age = 13;\n\nconsole.log(`My cat is named ${name} and is ${age} years old.`);\n</pre></div>\n\n\n<p>In ES5, we handled line breaks like this:</p>\n\n\n<div class=\"wp-block-syntaxhighlighter-code \"><pre class=\"brush: plain; title: ; notranslate\" title=\"\">\nvar text = (\n    'cat\\n' +\n    'dog\\n' +\n    'nickelodeon'\n);\n</pre></div>\n\n\n<p>Or so:</p>\n\n\n<div class=\"wp-block-syntaxhighlighter-code \"><pre class=\"brush: plain; title: ; notranslate\" title=\"\">\nvar text = &#91;\n    'cat',\n    'dog',\n    'nickelodeon'\n].join('\\n');\n</pre></div>\n\n\n<p><strong>Template literals</strong>&nbsp;&nbsp;save line breaks:</p>\n\n\n<div class=\"wp-block-syntaxhighlighter-code \"><pre class=\"brush: plain; title: ; notranslate\" title=\"\">\nlet text = ( `cat\ndog\nnickelodeon`\n);\n</pre></div>\n\n\n<p><strong>Template literals</strong>&nbsp;can also process expressions:</p>\n\n\n<div class=\"wp-block-syntaxhighlighter-code \"><pre class=\"brush: plain; title: ; notranslate\" title=\"\">\nlet today = new Date();\nlet text = `The time and date is ${today.toLocaleString()}`;\n</pre></div>\n\n\n<h3>Restructuring</h3>\n\n\n\n<p>Destructuring allows us to extract values ​​from arrays and objects (even nested ones) and put them into variables in a more convenient way.</p>\n\n\n\n<h4>Array destructuring</h4>\n\n\n<div class=\"wp-block-syntaxhighlighter-code \"><pre class=\"brush: plain; title: ; notranslate\" title=\"\">\nvar arr = &#91;1, 2, 3, 4];\nvar a = arr&#91;0];\nvar b = arr&#91;1];\nvar c = arr&#91;2];\nvar d = arr&#91;3];\n</pre></div>\n\n<div class=\"wp-block-syntaxhighlighter-code \"><pre class=\"brush: plain; title: ; notranslate\" title=\"\">\nlet &#91;a, b, c, d] = &#91;1, 2, 3, 4];\n\nconsole.log(a); // 1\nconsole.log(b); // 2\n</pre></div>\n\n\n<h4>Object Restructuring</h4>\n\n\n<div class=\"wp-block-syntaxhighlighter-code \"><pre class=\"brush: plain; title: ; notranslate\" title=\"\">\nvar luke = { occupation: 'jedi', father: 'anakin' };\nvar occupation = luke.occupation; // 'jedi'\nvar father = luke.father; // 'anakin'\n</pre></div>\n\n<div class=\"wp-block-syntaxhighlighter-code \"><pre class=\"brush: plain; title: ; notranslate\" title=\"\">\nlet luke = { occupation: 'jedi', father: 'anakin' };\nlet {occupation, father} = luke;\n\nconsole.log(occupation); // 'jedi'\nconsole.log(father); // 'anakin'\n</pre></div>\n\n\n<h3>Modules</h3>\n\n\n\n<p>Before ES6 we had to use a library like  <a rel=\"noreferrer noopener\" href=\"http://browserify.org/\" target=\"_blank\">Browserify</a> to create modules on the client-side, and <a rel=\"noreferrer noopener\" href=\"https://nodejs.org/api/modules.html#modules_module_require_id\" target=\"_blank\">require</a> in  <strong>Node.js</strong>. With ES6, we can directly use modules of any type (AMD and CommonJS).</p>\n\n\n\n<h4>Export to CommonJS</h4>\n\n\n<div class=\"wp-block-syntaxhighlighter-code \"><pre class=\"brush: plain; title: ; notranslate\" title=\"\">\nmodule.exports = 1;\nmodule.exports = { foo: 'bar' };\nmodule.exports = &#91;'foo', 'bar'];\nmodule.exports = function bar () {};\n</pre></div>\n\n\n<h4>Export to ES6</h4>\n\n\n\n<p>In ES6, we can use different types of exports.</p>\n\n\n\n<p><strong>Named Export</strong>&nbsp;:</p>\n\n\n<div class=\"wp-block-syntaxhighlighter-code \"><pre class=\"brush: plain; title: ; notranslate\" title=\"\">\nexport let name = 'David';\nexport let age  = 25;\n</pre></div>\n\n\n<p><strong>Export</strong>&nbsp;&nbsp;object&nbsp;<strong>list</strong>&nbsp;:</p>\n\n\n<div class=\"wp-block-syntaxhighlighter-code \"><pre class=\"brush: plain; title: ; notranslate\" title=\"\">\nfunction sumTwo(a, b) {\n    return a + b;\n}\n\nfunction sumThree(a, b, c) {\n    return a + b + c;\n}\n\nexport { sumTwo, sumThree };\n</pre></div>\n\n\n<p>We can also export functions, objects, and values ​​simply by using the keyword&nbsp;&nbsp;<code>export</code>:</p>\n\n\n<div class=\"wp-block-syntaxhighlighter-code \"><pre class=\"brush: plain; title: ; notranslate\" title=\"\">\nexport function sumTwo(a, b) {\n    return a + b;\n}\n\nexport function sumThree(a, b, c) {\n    return a + b + c;\n}\n</pre></div>\n\n\n<p>Finally, you can&nbsp;&nbsp;<strong>export the default bindings</strong>&nbsp;:</p>\n\n\n<div class=\"wp-block-syntaxhighlighter-code \"><pre class=\"brush: plain; title: ; notranslate\" title=\"\">\nfunction sumTwo(a, b) {\n    return a + b;\n}\n\nfunction sumThree(a, b, c) {\n    return a + b + c;\n}\n\nlet api = {\n    sumTwo,\n    sumThree\n};\n\nexport default api;\n\n/* Which is the same as\n * export { api as default };\n */\n</pre></div>\n\n\n<blockquote class=\"wp-block-quote\"><p><strong>Best practice</strong>&nbsp;: always use the method&nbsp;&nbsp;<code>export default</code>&nbsp;<strong>at the end of the</strong>&nbsp;&nbsp;module.&nbsp;This will clearly show what is exported and save time.</p></blockquote>\n\n\n\n<h4>Import to ES6</h4>\n\n\n\n<p>ES6 provides various types of imports.&nbsp;We can import the whole file:</p>\n\n\n<div class=\"wp-block-syntaxhighlighter-code \"><pre class=\"brush: plain; title: ; notranslate\" title=\"\">\nimport 'underscore';\n</pre></div>\n\n\n<blockquote class=\"wp-block-quote\"><p>It is important to note that&nbsp;&nbsp;<strong>importing the entire file will lead to the execution of all the code at the external level of this file</strong>&nbsp;.</p></blockquote>\n\n\n\n<p>Like Python, there is a named import:</p>\n\n\n<div class=\"wp-block-syntaxhighlighter-code \"><pre class=\"brush: plain; title: ; notranslate\" title=\"\">\nimport { sumTwo, sumThree } from 'math/addition';\n</pre></div>\n\n\n<p>Which can be renamed:</p>\n\n\n<div class=\"wp-block-syntaxhighlighter-code \"><pre class=\"brush: plain; title: ; notranslate\" title=\"\">\nimport {\n    sumTwo as addTwoNumbers,\n    sumThree as sumThreeNumbers\n} from 'math/addition';\n</pre></div>\n\n\n<p>In addition, you can&nbsp;&nbsp;<strong>import the namespace</strong>&nbsp;:</p>\n\n\n<div class=\"wp-block-syntaxhighlighter-code \"><pre class=\"brush: plain; title: ; notranslate\" title=\"\">\nimport * as util from 'math/addition';\n</pre></div>\n\n\n<p>Finally, a list of values ​​from the module:</p>\n\n\n<div class=\"wp-block-syntaxhighlighter-code \"><pre class=\"brush: plain; title: ; notranslate\" title=\"\">\nimport * as additionUtil from 'math/addition';\nconst { sumTwo, sumThree } = additionUtil;\n</pre></div>\n\n\n<p>The import from the binding looks like this by default:</p>\n\n\n<div class=\"wp-block-syntaxhighlighter-code \"><pre class=\"brush: plain; title: ; notranslate\" title=\"\">\nimport api from 'math/addition';\n// Same as: import { default as api } from 'math/addition';\n</pre></div>\n\n\n<p>Exporting is best simplified, but sometimes you can mix default imports with something else.&nbsp;When we export like this:</p>\n\n\n<div class=\"wp-block-syntaxhighlighter-code \"><pre class=\"brush: plain; title: ; notranslate\" title=\"\">\n// foos.js\nexport { foo as default, foo1, foo2 };\n</pre></div>\n\n\n<p>You can import them like this:</p>\n\n\n<div class=\"wp-block-syntaxhighlighter-code \"><pre class=\"brush: plain; title: ; notranslate\" title=\"\">\nimport foo, { foo1, foo2 } from 'foos';\n</pre></div>\n\n\n<p>When importing a module exported using CommonJS syntax (as in React), you can do:</p>\n\n\n<div class=\"wp-block-syntaxhighlighter-code \"><pre class=\"brush: plain; title: ; notranslate\" title=\"\">\nimport React from 'react';\nconst { Component, PropTypes } = React;\n</pre></div>\n\n\n<p>This can be simplified:</p>\n\n\n<div class=\"wp-block-syntaxhighlighter-code \"><pre class=\"brush: plain; title: ; notranslate\" title=\"\">\nimport React, { Component, PropTypes } from 'react';\n</pre></div>\n\n\n<blockquote class=\"wp-block-quote\"><p><strong>Note</strong>&nbsp;: exported values ​​are&nbsp;<strong>bindings</strong>&nbsp;, not links.&nbsp;Therefore, a change in one module will entail a change in another.</p></blockquote>\n\n\n\n<h3>Parameters</h3>\n\n\n\n<p>In ES5, there were several ways to handle functions with <strong>default values, undefined arguments,</strong> and <strong>named parameters</strong>. In ES6, all this is implemented, and with clear syntax.</p>\n\n\n\n<h4>Default options</h4>\n\n\n<div class=\"wp-block-syntaxhighlighter-code \"><pre class=\"brush: plain; title: ; notranslate\" title=\"\">\nfunction addTwoNumbers(x, y) {\n    x = x || 0;\n    y = y || 0;\n    return x + y;\n}\n</pre></div>\n\n\n<p>In ES6, you can simply specify the default function parameters:</p>\n\n\n<div class=\"wp-block-syntaxhighlighter-code \"><pre class=\"brush: plain; title: ; notranslate\" title=\"\">\nfunction addTwoNumbers(x=0, y=0) {\n    return x + y;\n}\n\n</pre></div>\n\n<div class=\"wp-block-syntaxhighlighter-code \"><pre class=\"brush: plain; title: ; notranslate\" title=\"\">\naddTwoNumbers(2, 4); // 6\naddTwoNumbers(2); // 2\naddTwoNumbers(); // 0\n</pre></div>\n\n\n<h4>Residual parameters</h4>\n\n\n\n<p>In ES5, an undetermined number of arguments was processed like this:</p>\n\n\n<div class=\"wp-block-syntaxhighlighter-code \"><pre class=\"brush: plain; title: ; notranslate\" title=\"\">\nfunction logArguments() {\n    for (var i=0; i &lt; arguments.length; i++) {\n        console.log(arguments&#91;i]);\n    }\n}\n</pre></div>\n\n\n<p>Using the&nbsp;&nbsp;<strong>residual</strong>&nbsp;operator, you can pass an indefinite number of arguments:</p>\n\n\n<div class=\"wp-block-syntaxhighlighter-code \"><pre class=\"brush: plain; title: ; notranslate\" title=\"\">\nfunction logArguments(...args) {\n    for (let arg of args) {\n        console.log(arg);\n    }\n}\n</pre></div>\n\n\n<h4>Named Parameters</h4>\n\n\n\n<p>One of the ES5 templates for working with named parameters was the <strong>options object template</strong>, taken from jQuery.</p>\n\n\n<div class=\"wp-block-syntaxhighlighter-code \"><pre class=\"brush: plain; title: ; notranslate\" title=\"\">\nfunction initializeCanvas(options) {\n    var height = options.height || 600;\n    var width  = options.width  || 400;\n    var lineStroke = options.lineStroke || 'black';\n}\n</pre></div>\n\n\n<p>The same can be obtained using the destructor as a formal parameter of the function:</p>\n\n\n<div class=\"wp-block-syntaxhighlighter-code \"><pre class=\"brush: plain; title: ; notranslate\" title=\"\">\nfunction initializeCanvas(\n    { height=600, width=400, lineStroke='black'}) {\n        // Use variables height, width, lineStroke here\n    }\n</pre></div>\n\n\n<p>If we want to make all the values ​​optional, we can destruct the empty object:</p>\n\n\n<div class=\"wp-block-syntaxhighlighter-code \"><pre class=\"brush: plain; title: ; notranslate\" title=\"\">\nfunction initializeCanvas(\n    { height=600, width=400, lineStroke='black'} = {}) {\n        // ...\n    }\n</pre></div>\n\n\n<h4>Extension operator</h4>\n\n\n\n<p>In ES5, you could find the maximum array using the method&nbsp;&nbsp;<code>apply</code>&nbsp;above&nbsp;&nbsp;<code>Math.max</code>:</p>\n\n\n<div class=\"wp-block-syntaxhighlighter-code \"><pre class=\"brush: plain; title: ; notranslate\" title=\"\">\nMath.max.apply(null, &#91;-1, 100, 9001, -32]); // 9001\n</pre></div>\n\n\n<p>In ES6, you can use the extension operator to pass an array of values ​​as function parameters:</p>\n\n\n<div class=\"wp-block-syntaxhighlighter-code \"><pre class=\"brush: plain; title: ; notranslate\" title=\"\">\nMath.max(...&#91;-1, 100, 9001, -32]); // 9001\n</pre></div>\n\n\n<p>You can also intuitively concatenate literal arrays:</p>\n\n\n<div class=\"wp-block-syntaxhighlighter-code \"><pre class=\"brush: plain; title: ; notranslate\" title=\"\">\nlet cities = &#91;'San Francisco', 'Los Angeles'];\nlet places = &#91;'Miami', ...cities, 'Chicago']; // &#91;'Miami', 'San Francisco', 'Los Angeles', 'Chicago']\n</pre></div>\n\n\n<h3>Classes</h3>\n\n\n\n<p>Prior to ES6, classes needed to be created by adding properties to the constructor function, expanding the prototype:</p>\n\n\n<div class=\"wp-block-syntaxhighlighter-code \"><pre class=\"brush: plain; title: ; notranslate\" title=\"\">\nfunction Person(name, age, gender) {\n    this.name   = name;\n    this.age    = age;\n    this.gender = gender;\n}\n\nPerson.prototype.incrementAge = function () {\n    return this.age += 1;\n};\n</pre></div>\n\n\n<p>And the extended classes are like this:</p>\n\n\n<div class=\"wp-block-syntaxhighlighter-code \"><pre class=\"brush: plain; title: ; notranslate\" title=\"\">\nfunction Personal(name, age, gender, occupation, hobby) {\n    Person.call(this, name, age, gender);\n    this.occupation = occupation;\n    this.hobby = hobby;\n}\n\nPersonal.prototype = Object.create(Person.prototype);\nPersonal.prototype.constructor = Personal;\nPersonal.prototype.incrementAge = function () {\n    Person.prototype.incrementAge.call(this);\n    this.age += 20;\n    console.log(this.age);\n};\n</pre></div>\n\n\n<p>ES6 provides very convenient syntactic sugar.&nbsp;Classes can be created this way:</p>\n\n\n<div class=\"wp-block-syntaxhighlighter-code \"><pre class=\"brush: plain; title: ; notranslate\" title=\"\">\nclass Person {\n    constructor(name, age, gender) {\n        this.name   = name;\n        this.age    = age;\n        this.gender = gender;\n    }\n\n    incrementAge() {\n      this.age += 1;\n    }\n}\n</pre></div>\n\n\n<p>And expand &#8211; using the keyword&nbsp;&nbsp;<code>extends</code>:</p>\n\n\n<div class=\"wp-block-syntaxhighlighter-code \"><pre class=\"brush: plain; title: ; notranslate\" title=\"\">\nclass Personal extends Person {\n    constructor(name, age, gender, occupation, hobby) {\n        super(name, age, gender);\n        this.occupation = occupation;\n        this.hobby = hobby;\n    }\n\n    incrementAge() {\n        super.incrementAge();\n        this.age += 20;\n        console.log(this.age);\n    }\n}\n</pre></div>\n\n\n<blockquote class=\"wp-block-quote\"><p><strong>Best practice</strong>&nbsp;: although this syntax hides the implementation, it will be easier for beginners to understand it, and the written code will be cleaner.</p></blockquote>\n","title":"What and how in ES6: tricks, best practices, and examples. Part one. let/const, blocks, arrow functions, strings, destructuring, modules, parameters, classes","date":"March 10, 2020","featuredImage":{"node":{"altText":"","localFile":{"childImageSharp":{"fluid":{"tracedSVG":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='400'%20height='140'%20viewBox='0%200%20400%20140'%20preserveAspectRatio='none'%3e%3cpath%20d='M0%2070v70h401V0H0v70m156%202v43h88V28h-88v44m9%200v15h20v-2c0-3%200-3-7-3h-7v-4l1-3%205-1c6%200%206%200%206-3%200-2%200-2-6-2s-6%200-6-3%200-3%207-3c6%200%207-1%207-3v-3h-20v15m28-13c-2%202-3%203-3%206%200%205%202%207%208%2010%204%202%205%202%205%204-1%203-5%204-8%201-2-2-3-2-5%200l-2%202%202%202c7%207%2019%203%2019-5%200-5-2-7-8-10-7-3-7-9%200-6h5c4-5-8-8-13-4m26%206c-3%204-6%208-6%2010-3%2011%2013%2017%2020%209%206-6%203-16-6-16h-3l3-4%204-6c1-1%200-1-3-1-4%200-4%200-9%208'%20fill='%23d3d3d3'%20fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":2.840909090909091,"src":"/static/b7784e86a0cbd4c2944da0a6f9bd4e06/c62c0/es6.png","srcSet":"/static/b7784e86a0cbd4c2944da0a6f9bd4e06/002c1/es6.png 250w,\n/static/b7784e86a0cbd4c2944da0a6f9bd4e06/53f65/es6.png 500w,\n/static/b7784e86a0cbd4c2944da0a6f9bd4e06/c62c0/es6.png 770w","sizes":"(max-width: 770px) 100vw, 770px"}}}}}},"previous":{"uri":"/what-are-es6-tricks-best-practices-and-examples/","title":"What are ES6 tricks, best practices, and examples?"},"next":{"uri":"/things-in-css-that-no-one-ever-told-me-about/","title":"Things in CSS that no one ever told me about."}},"pageContext":{"id":"cG9zdDoxNDQx","previousPostId":"cG9zdDoxNDQ0","nextPostId":"cG9zdDoxNDA1"}}